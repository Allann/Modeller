using System;
using System.Linq;
using System.Text;
using Modeller.Extensions;
using Modeller.Interfaces;
using Modeller.Models;
using Modeller.Outputs;

namespace MvcSolution
{
    public class Generator : IGenerator
    {
        private readonly Module _module;

        public Generator(ISettings settings, Module module)
        {
            Settings = settings ?? throw new ArgumentNullException(nameof(settings));
            _module = module ?? throw new ArgumentNullException(nameof(module));
        }

        public ISettings Settings { get; }

        public IOutput Create()
        {
            var solution = new Solution() { Name = _module.Project.Singular.Value, Namespace = _module.Namespace, Directory = $"{System.IO.Path.Combine(_module.Project.Singular.Value, "Dev", _module.Namespace)}" };
            solution.AddFile(new File { Content = _module.ToJson(), Name = "model.json" });
            solution.AddFile(new File { Content = Settings.ToJson(), Name = "generateSettings.json" });

            solution.AddProject((IProject)new Domain.Generator(Settings, _module).Create());
            solution.AddProject((IProject)new Security.Generator(Settings, _module).Create());
            solution.AddProject((IProject)new Dto.Generator(Settings, _module).Create());
            solution.AddProject((IProject)new Data.Generator(Settings, _module).Create());
            solution.AddProject((IProject)new Interface.Generator(Settings, _module).Create());
            solution.AddProject((IProject)new Business.Generator(Settings, _module).Create());
            solution.AddProject((IProject)new MvcWebsite.Generator(Settings, _module).Create());
            solution.AddProject((IProject)new Api.Generator(Settings, _module).Create());
            solution.AddProject((IProject)new UnitTests.Generator(Settings, _module).Create());

            solution.AddFile(GetSolutionFile(solution));
            solution.AddFile(GitIgnore(solution));
            return solution;
        }

        private File GitIgnore(ISolution solution)
        {
            var sb = new StringBuilder();

            sb.AppendLine("");
            sb.AppendLine("");
            sb.AppendLine("## Ignore Visual Studio temporary files, build results, and");
            sb.AppendLine("## files generated by popular Visual Studio add-ons.");
            sb.AppendLine("##");
            sb.AppendLine("## Get latest from https://github.com/github/gitignore/blob/master/VisualStudio.gitignore");
            sb.AppendLine("");
            sb.AppendLine("# User-specific files");
            sb.AppendLine("*.suo");
            sb.AppendLine("*.user");
            sb.AppendLine("*.userosscache");
            sb.AppendLine("*.sln.docstates");
            sb.AppendLine("");
            sb.AppendLine("# User-specific files (MonoDevelop/Xamarin Studio)");
            sb.AppendLine("*.userprefs");
            sb.AppendLine("");
            sb.AppendLine("# Build results");
            sb.AppendLine("[Dd]ebug/");
            sb.AppendLine("[Dd]ebugPublic/");
            sb.AppendLine("[Rr]elease/");
            sb.AppendLine("[Rr]eleases/");
            sb.AppendLine("x64/");
            sb.AppendLine("x86/");
            sb.AppendLine("bld/");
            sb.AppendLine("[Bb]in/");
            sb.AppendLine("[Oo]bj/");
            sb.AppendLine("[Ll]og/");
            sb.AppendLine("");
            sb.AppendLine("# Visual Studio 2015/2017 cache/options directory");
            sb.AppendLine(".vs/");
            sb.AppendLine("# Uncomment if you have tasks that create the project's static files in wwwroot");
            sb.AppendLine("#wwwroot/");
            sb.AppendLine("");
            sb.AppendLine("# Visual Studio 2017 auto generated files");
            sb.AppendLine("Generated\\ Files/");
            sb.AppendLine("");
            sb.AppendLine("# MSTest test Results");
            sb.AppendLine("[Tt]est[Rr]esult*/");
            sb.AppendLine("[Bb]uild[Ll]og.*");
            sb.AppendLine("");
            sb.AppendLine("# NUNIT");
            sb.AppendLine("*.VisualState.xml");
            sb.AppendLine("TestResult.xml");
            sb.AppendLine("");
            sb.AppendLine("# Build Results of an ATL Project");
            sb.AppendLine("[Dd]ebugPS/");
            sb.AppendLine("[Rr]eleasePS/");
            sb.AppendLine("dlldata.c");
            sb.AppendLine("");
            sb.AppendLine("# Benchmark Results");
            sb.AppendLine("BenchmarkDotNet.Artifacts/");
            sb.AppendLine("");
            sb.AppendLine("# .NET Core");
            sb.AppendLine("project.lock.json");
            sb.AppendLine("project.fragment.lock.json");
            sb.AppendLine("artifacts/");
            sb.AppendLine("");
            sb.AppendLine("# StyleCop");
            sb.AppendLine("StyleCopReport.xml");
            sb.AppendLine("");
            sb.AppendLine("# Files built by Visual Studio");
            sb.AppendLine("*_i.c");
            sb.AppendLine("*_p.c");
            sb.AppendLine("*_h.h");
            sb.AppendLine("*.ilk");
            sb.AppendLine("*.meta");
            sb.AppendLine("*.obj");
            sb.AppendLine("*.iobj");
            sb.AppendLine("*.pch");
            sb.AppendLine("*.pdb");
            sb.AppendLine("*.ipdb");
            sb.AppendLine("*.pgc");
            sb.AppendLine("*.pgd");
            sb.AppendLine("*.rsp");
            sb.AppendLine("*.sbr");
            sb.AppendLine("*.tlb");
            sb.AppendLine("*.tli");
            sb.AppendLine("*.tlh");
            sb.AppendLine("*.tmp");
            sb.AppendLine("*.tmp_proj");
            sb.AppendLine("*.log");
            sb.AppendLine("*.vspscc");
            sb.AppendLine("*.vssscc");
            sb.AppendLine(".builds");
            sb.AppendLine("*.pidb");
            sb.AppendLine("*.svclog");
            sb.AppendLine("*.scc");
            sb.AppendLine("");
            sb.AppendLine("# Chutzpah Test files");
            sb.AppendLine("_Chutzpah*");
            sb.AppendLine("");
            sb.AppendLine("# Visual C++ cache files");
            sb.AppendLine("ipch/");
            sb.AppendLine("*.aps");
            sb.AppendLine("*.ncb");
            sb.AppendLine("*.opendb");
            sb.AppendLine("*.opensdf");
            sb.AppendLine("*.sdf");
            sb.AppendLine("*.cachefile");
            sb.AppendLine("*.VC.db");
            sb.AppendLine("*.VC.VC.opendb");
            sb.AppendLine("");
            sb.AppendLine("# Visual Studio profiler");
            sb.AppendLine("*.psess");
            sb.AppendLine("*.vsp");
            sb.AppendLine("*.vspx");
            sb.AppendLine("*.sap");
            sb.AppendLine("");
            sb.AppendLine("# Visual Studio Trace Files");
            sb.AppendLine("*.e2e");
            sb.AppendLine("");
            sb.AppendLine("# TFS 2012 Local Workspace");
            sb.AppendLine("$tf/");
            sb.AppendLine("");
            sb.AppendLine("# Guidance Automation Toolkit");
            sb.AppendLine("*.gpState");
            sb.AppendLine("");
            sb.AppendLine("# ReSharper is a .NET coding add-in");
            sb.AppendLine("_ReSharper*/");
            sb.AppendLine("*.[Rr]e[Ss]harper");
            sb.AppendLine("*.DotSettings.user");
            sb.AppendLine("");
            sb.AppendLine("# JustCode is a .NET coding add-in");
            sb.AppendLine(".JustCode");
            sb.AppendLine("");
            sb.AppendLine("# TeamCity is a build add-in");
            sb.AppendLine("_TeamCity*");
            sb.AppendLine("");
            sb.AppendLine("# DotCover is a Code Coverage Tool");
            sb.AppendLine("*.dotCover");
            sb.AppendLine("");
            sb.AppendLine("# AxoCover is a Code Coverage Tool");
            sb.AppendLine(".axoCover/*");
            sb.AppendLine("!.axoCover/settings.json");
            sb.AppendLine("");
            sb.AppendLine("# Visual Studio code coverage results");
            sb.AppendLine("*.coverage");
            sb.AppendLine("*.coveragexml");
            sb.AppendLine("");
            sb.AppendLine("# NCrunch");
            sb.AppendLine("_NCrunch_*");
            sb.AppendLine(".*crunch*.local.xml");
            sb.AppendLine("nCrunchTemp_*");
            sb.AppendLine("");
            sb.AppendLine("# MightyMoose");
            sb.AppendLine("*.mm.*");
            sb.AppendLine("AutoTest.Net/");
            sb.AppendLine("");
            sb.AppendLine("# Web workbench (sass)");
            sb.AppendLine(".sass-cache/");
            sb.AppendLine("");
            sb.AppendLine("# Installshield output folder");
            sb.AppendLine("[Ee]xpress/");
            sb.AppendLine("");
            sb.AppendLine("# DocProject is a documentation generator add-in");
            sb.AppendLine("DocProject/buildhelp/");
            sb.AppendLine("DocProject/Help/*.HxT");
            sb.AppendLine("DocProject/Help/*.HxC");
            sb.AppendLine("DocProject/Help/*.hhc");
            sb.AppendLine("DocProject/Help/*.hhk");
            sb.AppendLine("DocProject/Help/*.hhp");
            sb.AppendLine("DocProject/Help/Html2");
            sb.AppendLine("DocProject/Help/html");
            sb.AppendLine("");
            sb.AppendLine("# Click-Once directory");
            sb.AppendLine("publish/");
            sb.AppendLine("");
            sb.AppendLine("# Publish Web Output");
            sb.AppendLine("*.[Pp]ublish.xml");
            sb.AppendLine("*.azurePubxml");
            sb.AppendLine("# Note: Comment the next line if you want to checkin your web deploy settings,");
            sb.AppendLine("# but database connection strings (with potential passwords) will be unencrypted");
            sb.AppendLine("*.pubxml");
            sb.AppendLine("*.publishproj");
            sb.AppendLine("");
            sb.AppendLine("# Microsoft Azure Web App publish settings. Comment the next line if you want to");
            sb.AppendLine("# checkin your Azure Web App publish settings, but sensitive information contained");
            sb.AppendLine("# in these scripts will be unencrypted");
            sb.AppendLine("PublishScripts/");
            sb.AppendLine("");
            sb.AppendLine("# NuGet Packages");
            sb.AppendLine("*.nupkg");
            sb.AppendLine("# The packages folder can be ignored because of Package Restore");
            sb.AppendLine("**/[Pp]ackages/*");
            sb.AppendLine("# except build/, which is used as an MSBuild target.");
            sb.AppendLine("!**/[Pp]ackages/build/");
            sb.AppendLine("# Uncomment if necessary however generally it will be regenerated when needed");
            sb.AppendLine("#!**/[Pp]ackages/repositories.config");
            sb.AppendLine("# NuGet v3's project.json files produces more ignorable files");
            sb.AppendLine("*.nuget.props");
            sb.AppendLine("*.nuget.targets");
            sb.AppendLine("");
            sb.AppendLine("# Microsoft Azure Build Output");
            sb.AppendLine("csx/");
            sb.AppendLine("*.build.csdef");
            sb.AppendLine("");
            sb.AppendLine("# Microsoft Azure Emulator");
            sb.AppendLine("ecf/");
            sb.AppendLine("rcf/");
            sb.AppendLine("");
            sb.AppendLine("# Windows Store app package directories and files");
            sb.AppendLine("AppPackages/");
            sb.AppendLine("BundleArtifacts/");
            sb.AppendLine("Package.StoreAssociation.xml");
            sb.AppendLine("_pkginfo.txt");
            sb.AppendLine("*.appx");
            sb.AppendLine("");
            sb.AppendLine("# Visual Studio cache files");
            sb.AppendLine("# files ending in .cache can be ignored");
            sb.AppendLine("*.[Cc]ache");
            sb.AppendLine("# but keep track of directories ending in .cache");
            sb.AppendLine("!*.[Cc]ache/");
            sb.AppendLine("");
            sb.AppendLine("# Others");
            sb.AppendLine("ClientBin/");
            sb.AppendLine("~$*");
            sb.AppendLine("*~");
            sb.AppendLine("*.dbmdl");
            sb.AppendLine("*.dbproj.schemaview");
            sb.AppendLine("*.jfm");
            sb.AppendLine("*.pfx");
            sb.AppendLine("*.publishsettings");
            sb.AppendLine("orleans.codegen.cs");
            sb.AppendLine("");
            sb.AppendLine("# Including strong name files can present a security risk");
            sb.AppendLine("# (https://github.com/github/gitignore/pull/2483#issue-259490424)");
            sb.AppendLine("#*.snk");
            sb.AppendLine("");
            sb.AppendLine("# Since there are multiple workflows, uncomment next line to ignore bower_components");
            sb.AppendLine("# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)");
            sb.AppendLine("#bower_components/");
            sb.AppendLine("");
            sb.AppendLine("# RIA/Silverlight projects");
            sb.AppendLine("Generated_Code/");
            sb.AppendLine("");
            sb.AppendLine("# Backup & report files from converting an old project file");
            sb.AppendLine("# to a newer Visual Studio version. Backup files are not needed,");
            sb.AppendLine("# because we have git ;-)");
            sb.AppendLine("_UpgradeReport_Files/");
            sb.AppendLine("Backup*/");
            sb.AppendLine("UpgradeLog*.XML");
            sb.AppendLine("UpgradeLog*.htm");
            sb.AppendLine("ServiceFabricBackup/");
            sb.AppendLine("*.rptproj.bak");
            sb.AppendLine("");
            sb.AppendLine("# SQL Server files");
            sb.AppendLine("*.mdf");
            sb.AppendLine("*.ldf");
            sb.AppendLine("*.ndf");
            sb.AppendLine("");
            sb.AppendLine("# Business Intelligence projects");
            sb.AppendLine("*.rdl.data");
            sb.AppendLine("*.bim.layout");
            sb.AppendLine("*.bim_*.settings");
            sb.AppendLine("*.rptproj.rsuser");
            sb.AppendLine("");
            sb.AppendLine("# Microsoft Fakes");
            sb.AppendLine("FakesAssemblies/");
            sb.AppendLine("");
            sb.AppendLine("# GhostDoc plugin setting file");
            sb.AppendLine("*.GhostDoc.xml");
            sb.AppendLine("");
            sb.AppendLine("# Node.js Tools for Visual Studio");
            sb.AppendLine(".ntvs_analysis.dat");
            sb.AppendLine("node_modules/");
            sb.AppendLine("");
            sb.AppendLine("# Visual Studio 6 build log");
            sb.AppendLine("*.plg");
            sb.AppendLine("");
            sb.AppendLine("# Visual Studio 6 workspace options file");
            sb.AppendLine("*.opt");
            sb.AppendLine("");
            sb.AppendLine("# Visual Studio 6 auto-generated workspace file (contains which files were open etc.)");
            sb.AppendLine("*.vbw");
            sb.AppendLine("");
            sb.AppendLine("# Visual Studio LightSwitch build output");
            sb.AppendLine("**/*.HTMLClient/GeneratedArtifacts");
            sb.AppendLine("**/*.DesktopClient/GeneratedArtifacts");
            sb.AppendLine("**/*.DesktopClient/ModelManifest.xml");
            sb.AppendLine("**/*.Server/GeneratedArtifacts");
            sb.AppendLine("**/*.Server/ModelManifest.xml");
            sb.AppendLine("_Pvt_Extensions");
            sb.AppendLine("");
            sb.AppendLine("# Paket dependency manager");
            sb.AppendLine(".paket/paket.exe");
            sb.AppendLine("paket-files/");
            sb.AppendLine("");
            sb.AppendLine("# FAKE - F# Make");
            sb.AppendLine(".fake/");
            sb.AppendLine("");
            sb.AppendLine("# JetBrains Rider");
            sb.AppendLine(".idea/");
            sb.AppendLine("*.sln.iml");
            sb.AppendLine("");
            sb.AppendLine("# CodeRush");
            sb.AppendLine(".cr/");
            sb.AppendLine("");
            sb.AppendLine("# Python Tools for Visual Studio (PTVS)");
            sb.AppendLine("__pycache__/");
            sb.AppendLine("*.pyc");
            sb.AppendLine("");
            sb.AppendLine("# Cake - Uncomment if you are using it");
            sb.AppendLine("# tools/**");
            sb.AppendLine("# !tools/packages.config");
            sb.AppendLine("");
            sb.AppendLine("# Tabs Studio");
            sb.AppendLine("*.tss");
            sb.AppendLine("");
            sb.AppendLine("# Telerik's JustMock configuration file");
            sb.AppendLine("*.jmconfig");
            sb.AppendLine("");
            sb.AppendLine("# BizTalk build output");
            sb.AppendLine("*.btp.cs");
            sb.AppendLine("*.btm.cs");
            sb.AppendLine("*.odx.cs");
            sb.AppendLine("*.xsd.cs");
            sb.AppendLine("");
            sb.AppendLine("# OpenCover UI analysis results");
            sb.AppendLine("OpenCover/");
            sb.AppendLine("");
            sb.AppendLine("# Azure Stream Analytics local run output");
            sb.AppendLine("ASALocalRun/");
            sb.AppendLine("");
            sb.AppendLine("# MSBuild Binary and Structured Log");
            sb.AppendLine("*.binlog");
            sb.AppendLine("");
            sb.AppendLine("# NVidia Nsight GPU debugger configuration file");
            sb.AppendLine("*.nvuser");
            sb.AppendLine("");
            sb.AppendLine("# MFractors (Xamarin productivity tool) working folder");
            sb.AppendLine(".mfractor/");
            sb.AppendLine("");
            sb.AppendLine("# Local History for Visual Studio");
            sb.AppendLine(".localhistory/");

            return new File() { Name = $".gitignore", Content = sb.ToString(), CanOverwrite = Settings.SupportRegen };
        }

        private File GetSolutionFile(ISolution solution)
        {
            var sb = new StringBuilder();

            sb.AppendLine("Microsoft Visual Studio Solution File, Format Version 12.00");
            sb.AppendLine("# Visual Studio 15");
            sb.AppendLine("VisualStudioVersion = 15.0.26430.15");
            sb.AppendLine("MinimumVisualStudioVersion = 10.0.40219.1");
            sb.AppendLine("Project(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"src\", \"src\", \"{B9ADA1FA-D0CA-4993-BCB0-53725788E0A5}\"");
            sb.AppendLine("EndProject");
            sb.AppendLine("Project(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"tests\", \"tests\", \"{F1E9AF7B-1CF4-4953-B56F-BA519CEA6B58}\"");
            sb.AppendLine("EndProject");
            sb.AppendLine("Project(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Solution Items\", \"Solution Items\", \"{B105F4AD-8ECB-4443-BF53-C2164AE47325}\"");
            sb.AppendLine("	ProjectSection(SolutionItems) = preProject");
            sb.AppendLine("		.tfignore = .tfignore");
            sb.AppendLine("	EndProjectSection");
            sb.AppendLine("EndProject");

            foreach (var project in solution.Projects)
            {
                sb.AppendLine($"Project(\"{{9A19103F-16F7-4668-BE54-9A1E7A4F7556}}\") = \"{project.Name}\", \"{project.Path}\\{project.Name}.csproj\", \"{{{project.Id}}}\"");
                sb.AppendLine("EndProject");
            }

            sb.AppendLine("Global");
            sb.AppendLine("	GlobalSection(SolutionConfigurationPlatforms) = preSolution");
            sb.AppendLine("		Debug|Any CPU = Debug|Any CPU");
            sb.AppendLine("		Release|Any CPU = Release|Any CPU");
            sb.AppendLine("	EndGlobalSection");
            sb.AppendLine("	GlobalSection(ProjectConfigurationPlatforms) = postSolution");
            foreach (var project in solution.Projects.Cast<IProject>())
            {
                sb.AppendLine($"		{{{project.Id}}}.Debug|Any CPU.ActiveCfg = Debug|Any CPU");
                sb.AppendLine($"		{{{project.Id}}}.Debug|Any CPU.Build.0 = Debug|Any CPU");
                sb.AppendLine($"		{{{project.Id}}}.Release|Any CPU.ActiveCfg = Release|Any CPU");
                sb.AppendLine($"		{{{project.Id}}}.Release|Any CPU.Build.0 = Release|Any CPU");
            }
            sb.AppendLine("	EndGlobalSection");
            sb.AppendLine("	GlobalSection(SolutionProperties) = preSolution");
            sb.AppendLine("		HideSolutionNode = FALSE");
            sb.AppendLine("	EndGlobalSection");
            sb.AppendLine("	GlobalSection(NestedProjects) = preSolution");
            foreach (var project in solution.Projects.Cast<IProject>())
            {
                if (project.Name.EndsWith("UnitTests"))
                {
                    sb.AppendLine($"		{{{project.Id}}} = {{F1E9AF7B-1CF4-4953-B56F-BA519CEA6B58}}");
                }
                else
                {
                    sb.AppendLine($"		{{{project.Id}}} = {{B9ADA1FA-D0CA-4993-BCB0-53725788E0A5}}");
                }
            }
            sb.AppendLine("	EndGlobalSection");
            sb.AppendLine("	GlobalSection(ExtensibilityGlobals) = postSolution");
            sb.AppendLine("		SolutionGuid = {5749138A-5F4F-4163-9A84-138CB819693A}");
            sb.AppendLine("	EndGlobalSection");
            sb.AppendLine("EndGlobal");

            return new File() { Name = $"{_module.Namespace}.sln", Content = sb.ToString(), CanOverwrite = Settings.SupportRegen };
        }
    }
}